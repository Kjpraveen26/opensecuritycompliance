// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cowprotos/cowsynthesizerservice.proto

package vo

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Command is the message which will contains the commands from the client system.
type RequestQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId                   string          `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	AuthToken                  string          `protobuf:"bytes,2,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	FilterParams               []*FilterParams `protobuf:"bytes,3,rep,name=filter_params,json=filterParams,proto3" json:"filter_params,omitempty"`
	IsChainingCall             bool            `protobuf:"varint,4,opt,name=is_chaining_call,json=isChainingCall,proto3" json:"is_chaining_call,omitempty"`
	DataToProcess              []byte          `protobuf:"bytes,5,opt,name=data_to_process,json=dataToProcess,proto3" json:"data_to_process,omitempty"`
	Queries                    *Query          `protobuf:"bytes,6,opt,name=queries,proto3" json:"queries,omitempty"`
	IsFilteredDataToBeReturn   bool            `protobuf:"varint,7,opt,name=is_filtered_data_to_be_return,json=isFilteredDataToBeReturn,proto3" json:"is_filtered_data_to_be_return,omitempty"`
	IsDataTableView            bool            `protobuf:"varint,8,opt,name=is_data_table_view,json=isDataTableView,proto3" json:"is_data_table_view,omitempty"`
	FileName                   string          `protobuf:"bytes,9,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	QueryStr                   string          `protobuf:"bytes,10,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
	PlanIds                    []string        `protobuf:"bytes,11,rep,name=plan_ids,json=planIds,proto3" json:"plan_ids,omitempty"`
	ControlIds                 []string        `protobuf:"bytes,12,rep,name=control_ids,json=controlIds,proto3" json:"control_ids,omitempty"`
	FrameworkIds               []string        `protobuf:"bytes,13,rep,name=framework_ids,json=frameworkIds,proto3" json:"framework_ids,omitempty"`
	RecordIds                  []string        `protobuf:"bytes,14,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
	ReportIds                  []string        `protobuf:"bytes,15,rep,name=report_ids,json=reportIds,proto3" json:"report_ids,omitempty"`
	PlanExecutionIds           []string        `protobuf:"bytes,16,rep,name=plan_execution_ids,json=planExecutionIds,proto3" json:"plan_execution_ids,omitempty"`
	FromDate                   string          `protobuf:"bytes,17,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate                     string          `protobuf:"bytes,18,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	SynthesizerQueryId         string          `protobuf:"bytes,19,opt,name=synthesizer_query_id,json=synthesizerQueryId,proto3" json:"synthesizer_query_id,omitempty"`
	ReqParams                  []byte          `protobuf:"bytes,20,opt,name=req_params,json=reqParams,proto3" json:"req_params,omitempty"`
	SynthesizerName            string          `protobuf:"bytes,21,opt,name=synthesizer_name,json=synthesizerName,proto3" json:"synthesizer_name,omitempty"`
	EvidenceIds                []string        `protobuf:"bytes,22,rep,name=evidence_ids,json=evidenceIds,proto3" json:"evidence_ids,omitempty"`
	SecurityCtx                []byte          `protobuf:"bytes,23,opt,name=security_ctx,json=securityCtx,proto3" json:"security_ctx,omitempty"`
	UserDefinedSynthesizerId   string          `protobuf:"bytes,24,opt,name=user_defined_synthesizer_id,json=userDefinedSynthesizerId,proto3" json:"user_defined_synthesizer_id,omitempty"`
	UserDefinedSynthesizerName string          `protobuf:"bytes,25,opt,name=user_defined_synthesizer_name,json=userDefinedSynthesizerName,proto3" json:"user_defined_synthesizer_name,omitempty"`
	IsCardValidated            bool            `protobuf:"varint,26,opt,name=is_card_validated,json=isCardValidated,proto3" json:"is_card_validated,omitempty"`
	UserDefinedSrcId           string          `protobuf:"bytes,27,opt,name=user_defined_src_id,json=userDefinedSrcId,proto3" json:"user_defined_src_id,omitempty"`
	Level                      string          `protobuf:"bytes,28,opt,name=level,proto3" json:"level,omitempty"`
	Status                     string          `protobuf:"bytes,29,opt,name=status,proto3" json:"status,omitempty"`
	ContentPath                string          `protobuf:"bytes,30,opt,name=content_path,json=contentPath,proto3" json:"content_path,omitempty"`
}

func (x *RequestQuery) Reset() {
	*x = RequestQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuery) ProtoMessage() {}

func (x *RequestQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuery.ProtoReflect.Descriptor instead.
func (*RequestQuery) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{0}
}

func (x *RequestQuery) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *RequestQuery) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *RequestQuery) GetFilterParams() []*FilterParams {
	if x != nil {
		return x.FilterParams
	}
	return nil
}

func (x *RequestQuery) GetIsChainingCall() bool {
	if x != nil {
		return x.IsChainingCall
	}
	return false
}

func (x *RequestQuery) GetDataToProcess() []byte {
	if x != nil {
		return x.DataToProcess
	}
	return nil
}

func (x *RequestQuery) GetQueries() *Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *RequestQuery) GetIsFilteredDataToBeReturn() bool {
	if x != nil {
		return x.IsFilteredDataToBeReturn
	}
	return false
}

func (x *RequestQuery) GetIsDataTableView() bool {
	if x != nil {
		return x.IsDataTableView
	}
	return false
}

func (x *RequestQuery) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *RequestQuery) GetQueryStr() string {
	if x != nil {
		return x.QueryStr
	}
	return ""
}

func (x *RequestQuery) GetPlanIds() []string {
	if x != nil {
		return x.PlanIds
	}
	return nil
}

func (x *RequestQuery) GetControlIds() []string {
	if x != nil {
		return x.ControlIds
	}
	return nil
}

func (x *RequestQuery) GetFrameworkIds() []string {
	if x != nil {
		return x.FrameworkIds
	}
	return nil
}

func (x *RequestQuery) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *RequestQuery) GetReportIds() []string {
	if x != nil {
		return x.ReportIds
	}
	return nil
}

func (x *RequestQuery) GetPlanExecutionIds() []string {
	if x != nil {
		return x.PlanExecutionIds
	}
	return nil
}

func (x *RequestQuery) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *RequestQuery) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *RequestQuery) GetSynthesizerQueryId() string {
	if x != nil {
		return x.SynthesizerQueryId
	}
	return ""
}

func (x *RequestQuery) GetReqParams() []byte {
	if x != nil {
		return x.ReqParams
	}
	return nil
}

func (x *RequestQuery) GetSynthesizerName() string {
	if x != nil {
		return x.SynthesizerName
	}
	return ""
}

func (x *RequestQuery) GetEvidenceIds() []string {
	if x != nil {
		return x.EvidenceIds
	}
	return nil
}

func (x *RequestQuery) GetSecurityCtx() []byte {
	if x != nil {
		return x.SecurityCtx
	}
	return nil
}

func (x *RequestQuery) GetUserDefinedSynthesizerId() string {
	if x != nil {
		return x.UserDefinedSynthesizerId
	}
	return ""
}

func (x *RequestQuery) GetUserDefinedSynthesizerName() string {
	if x != nil {
		return x.UserDefinedSynthesizerName
	}
	return ""
}

func (x *RequestQuery) GetIsCardValidated() bool {
	if x != nil {
		return x.IsCardValidated
	}
	return false
}

func (x *RequestQuery) GetUserDefinedSrcId() string {
	if x != nil {
		return x.UserDefinedSrcId
	}
	return ""
}

func (x *RequestQuery) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *RequestQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RequestQuery) GetContentPath() string {
	if x != nil {
		return x.ContentPath
	}
	return ""
}

type SynthesizerV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId                   string `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	AuthToken                  string `protobuf:"bytes,2,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	AssessmentRunId            string `protobuf:"bytes,3,opt,name=assessment_run_id,json=assessmentRunId,proto3" json:"assessment_run_id,omitempty"`
	AssessmentRunControlId     string `protobuf:"bytes,4,opt,name=assessment_run_control_id,json=assessmentRunControlId,proto3" json:"assessment_run_control_id,omitempty"`
	AssessmentId               string `protobuf:"bytes,5,opt,name=assessment_id,json=assessmentId,proto3" json:"assessment_id,omitempty"`
	AssessmentControlId        string `protobuf:"bytes,6,opt,name=assessment_control_id,json=assessmentControlId,proto3" json:"assessment_control_id,omitempty"`
	CnPlanId                   string `protobuf:"bytes,7,opt,name=cn_plan_id,json=cnPlanId,proto3" json:"cn_plan_id,omitempty"`
	CnPlanRunId                string `protobuf:"bytes,8,opt,name=cn_plan_run_id,json=cnPlanRunId,proto3" json:"cn_plan_run_id,omitempty"`
	CnControlId                string `protobuf:"bytes,9,opt,name=cn_control_id,json=cnControlId,proto3" json:"cn_control_id,omitempty"`
	EvidenceId                 string `protobuf:"bytes,10,opt,name=evidence_id,json=evidenceId,proto3" json:"evidence_id,omitempty"`
	SecurityCtx                []byte `protobuf:"bytes,11,opt,name=security_ctx,json=securityCtx,proto3" json:"security_ctx,omitempty"`
	UserDefinedSynthesizerId   string `protobuf:"bytes,12,opt,name=user_defined_synthesizer_id,json=userDefinedSynthesizerId,proto3" json:"user_defined_synthesizer_id,omitempty"`
	UserDefinedSynthesizerName string `protobuf:"bytes,13,opt,name=user_defined_synthesizer_name,json=userDefinedSynthesizerName,proto3" json:"user_defined_synthesizer_name,omitempty"`
	IsCardValidated            bool   `protobuf:"varint,14,opt,name=is_card_validated,json=isCardValidated,proto3" json:"is_card_validated,omitempty"`
	UserDefinedSrcId           string `protobuf:"bytes,15,opt,name=user_defined_src_id,json=userDefinedSrcId,proto3" json:"user_defined_src_id,omitempty"`
	Level                      string `protobuf:"bytes,16,opt,name=level,proto3" json:"level,omitempty"`
	Status                     string `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	ContentPath                string `protobuf:"bytes,18,opt,name=content_path,json=contentPath,proto3" json:"content_path,omitempty"`
	ReqParams                  []byte `protobuf:"bytes,19,opt,name=req_params,json=reqParams,proto3" json:"req_params,omitempty"`
	CnRuleSetId                string `protobuf:"bytes,20,opt,name=cn_rule_set_id,json=cnRuleSetId,proto3" json:"cn_rule_set_id,omitempty"`
	CnRuleSetExecutionId       string `protobuf:"bytes,21,opt,name=cn_rule_set_execution_id,json=cnRuleSetExecutionId,proto3" json:"cn_rule_set_execution_id,omitempty"`
	SynthesizerName            string `protobuf:"bytes,22,opt,name=synthesizer_name,json=synthesizerName,proto3" json:"synthesizer_name,omitempty"`
	CnRuleName                 string `protobuf:"bytes,23,opt,name=cn_rule_name,json=cnRuleName,proto3" json:"cn_rule_name,omitempty"`
	CnTaskName                 string `protobuf:"bytes,24,opt,name=cn_task_name,json=cnTaskName,proto3" json:"cn_task_name,omitempty"`
	FileName                   string `protobuf:"bytes,25,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *SynthesizerV2) Reset() {
	*x = SynthesizerV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizerV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizerV2) ProtoMessage() {}

func (x *SynthesizerV2) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizerV2.ProtoReflect.Descriptor instead.
func (*SynthesizerV2) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{1}
}

func (x *SynthesizerV2) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *SynthesizerV2) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *SynthesizerV2) GetAssessmentRunId() string {
	if x != nil {
		return x.AssessmentRunId
	}
	return ""
}

func (x *SynthesizerV2) GetAssessmentRunControlId() string {
	if x != nil {
		return x.AssessmentRunControlId
	}
	return ""
}

func (x *SynthesizerV2) GetAssessmentId() string {
	if x != nil {
		return x.AssessmentId
	}
	return ""
}

func (x *SynthesizerV2) GetAssessmentControlId() string {
	if x != nil {
		return x.AssessmentControlId
	}
	return ""
}

func (x *SynthesizerV2) GetCnPlanId() string {
	if x != nil {
		return x.CnPlanId
	}
	return ""
}

func (x *SynthesizerV2) GetCnPlanRunId() string {
	if x != nil {
		return x.CnPlanRunId
	}
	return ""
}

func (x *SynthesizerV2) GetCnControlId() string {
	if x != nil {
		return x.CnControlId
	}
	return ""
}

func (x *SynthesizerV2) GetEvidenceId() string {
	if x != nil {
		return x.EvidenceId
	}
	return ""
}

func (x *SynthesizerV2) GetSecurityCtx() []byte {
	if x != nil {
		return x.SecurityCtx
	}
	return nil
}

func (x *SynthesizerV2) GetUserDefinedSynthesizerId() string {
	if x != nil {
		return x.UserDefinedSynthesizerId
	}
	return ""
}

func (x *SynthesizerV2) GetUserDefinedSynthesizerName() string {
	if x != nil {
		return x.UserDefinedSynthesizerName
	}
	return ""
}

func (x *SynthesizerV2) GetIsCardValidated() bool {
	if x != nil {
		return x.IsCardValidated
	}
	return false
}

func (x *SynthesizerV2) GetUserDefinedSrcId() string {
	if x != nil {
		return x.UserDefinedSrcId
	}
	return ""
}

func (x *SynthesizerV2) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *SynthesizerV2) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SynthesizerV2) GetContentPath() string {
	if x != nil {
		return x.ContentPath
	}
	return ""
}

func (x *SynthesizerV2) GetReqParams() []byte {
	if x != nil {
		return x.ReqParams
	}
	return nil
}

func (x *SynthesizerV2) GetCnRuleSetId() string {
	if x != nil {
		return x.CnRuleSetId
	}
	return ""
}

func (x *SynthesizerV2) GetCnRuleSetExecutionId() string {
	if x != nil {
		return x.CnRuleSetExecutionId
	}
	return ""
}

func (x *SynthesizerV2) GetSynthesizerName() string {
	if x != nil {
		return x.SynthesizerName
	}
	return ""
}

func (x *SynthesizerV2) GetCnRuleName() string {
	if x != nil {
		return x.CnRuleName
	}
	return ""
}

func (x *SynthesizerV2) GetCnTaskName() string {
	if x != nil {
		return x.CnTaskName
	}
	return ""
}

func (x *SynthesizerV2) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type ExecutionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Summary    []byte `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ExecutionSummary) Reset() {
	*x = ExecutionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionSummary) ProtoMessage() {}

func (x *ExecutionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionSummary.ProtoReflect.Descriptor instead.
func (*ExecutionSummary) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutionSummary) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ExecutionSummary) GetSummary() []byte {
	if x != nil {
		return x.Summary
	}
	return nil
}

type FilterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query                *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	SynthesizerName      string `protobuf:"bytes,2,opt,name=synthesizer_name,json=synthesizerName,proto3" json:"synthesizer_name,omitempty"`
	SynthesizerGroupName string `protobuf:"bytes,3,opt,name=synthesizer_group_name,json=synthesizerGroupName,proto3" json:"synthesizer_group_name,omitempty"`
	SynthesizerGroupId   string `protobuf:"bytes,4,opt,name=synthesizer_group_id,json=synthesizerGroupId,proto3" json:"synthesizer_group_id,omitempty"`
	SynthesizerId        string `protobuf:"bytes,5,opt,name=synthesizer_id,json=synthesizerId,proto3" json:"synthesizer_id,omitempty"`
	Order                int32  `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	DataToProcess        []byte `protobuf:"bytes,7,opt,name=data_to_process,json=dataToProcess,proto3" json:"data_to_process,omitempty"`
	ConfigId             string `protobuf:"bytes,8,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	FileName             string `protobuf:"bytes,9,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	QueryStr             string `protobuf:"bytes,10,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
	SynthesizerQueryId   string `protobuf:"bytes,11,opt,name=synthesizer_query_id,json=synthesizerQueryId,proto3" json:"synthesizer_query_id,omitempty"`
	ReqParams            []byte `protobuf:"bytes,12,opt,name=req_params,json=reqParams,proto3" json:"req_params,omitempty"`
}

func (x *FilterParams) Reset() {
	*x = FilterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterParams) ProtoMessage() {}

func (x *FilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterParams.ProtoReflect.Descriptor instead.
func (*FilterParams) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{3}
}

func (x *FilterParams) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FilterParams) GetSynthesizerName() string {
	if x != nil {
		return x.SynthesizerName
	}
	return ""
}

func (x *FilterParams) GetSynthesizerGroupName() string {
	if x != nil {
		return x.SynthesizerGroupName
	}
	return ""
}

func (x *FilterParams) GetSynthesizerGroupId() string {
	if x != nil {
		return x.SynthesizerGroupId
	}
	return ""
}

func (x *FilterParams) GetSynthesizerId() string {
	if x != nil {
		return x.SynthesizerId
	}
	return ""
}

func (x *FilterParams) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *FilterParams) GetDataToProcess() []byte {
	if x != nil {
		return x.DataToProcess
	}
	return nil
}

func (x *FilterParams) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *FilterParams) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FilterParams) GetQueryStr() string {
	if x != nil {
		return x.QueryStr
	}
	return ""
}

func (x *FilterParams) GetSynthesizerQueryId() string {
	if x != nil {
		return x.SynthesizerQueryId
	}
	return ""
}

func (x *FilterParams) GetReqParams() []byte {
	if x != nil {
		return x.ReqParams
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string        `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Query     []*QueryRules `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{4}
}

func (x *Query) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Query) GetQuery() []*QueryRules {
	if x != nil {
		return x.Query
	}
	return nil
}

type QueryRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Input    string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	Value    string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Query    *Query `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *QueryRules) Reset() {
	*x = QueryRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRules) ProtoMessage() {}

func (x *QueryRules) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRules.ProtoReflect.Descriptor instead.
func (*QueryRules) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRules) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *QueryRules) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryRules) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *QueryRules) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *QueryRules) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *QueryRules) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode    int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	FilteredData  []byte `protobuf:"bytes,2,opt,name=filtered_data,json=filteredData,proto3" json:"filtered_data,omitempty"`
	ProcessedData []byte `protobuf:"bytes,3,opt,name=processed_data,json=processedData,proto3" json:"processed_data,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{6}
}

func (x *QueryResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *QueryResponse) GetFilteredData() []byte {
	if x != nil {
		return x.FilteredData
	}
	return nil
}

func (x *QueryResponse) GetProcessedData() []byte {
	if x != nil {
		return x.ProcessedData
	}
	return nil
}

type Synthesizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ColumnsAllowedForFilter    []string `protobuf:"bytes,3,rep,name=columnsAllowedForFilter,proto3" json:"columnsAllowedForFilter,omitempty"`
	AuthToken                  string   `protobuf:"bytes,4,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	MethodName                 string   `protobuf:"bytes,5,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	SecurityCtx                []byte   `protobuf:"bytes,6,opt,name=security_ctx,json=securityCtx,proto3" json:"security_ctx,omitempty"`
	Description                string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ClassName                  string   `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	SynthesizerType            string   `protobuf:"bytes,9,opt,name=synthesizer_type,json=synthesizerType,proto3" json:"synthesizer_type,omitempty"`
	ModuleName                 string   `protobuf:"bytes,10,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	Version                    string   `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	Tags                       []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	OrgId                      string   `protobuf:"bytes,14,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DomainId                   string   `protobuf:"bytes,15,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	GroupId                    string   `protobuf:"bytes,16,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	FileBytes                  []byte   `protobuf:"bytes,17,opt,name=file_bytes,json=fileBytes,proto3" json:"file_bytes,omitempty"`
	OutputFiles                string   `protobuf:"bytes,18,opt,name=output_files,json=outputFiles,proto3" json:"output_files,omitempty"`
	IsFileToBeReturn           bool     `protobuf:"varint,19,opt,name=is_file_to_be_return,json=isFileToBeReturn,proto3" json:"is_file_to_be_return,omitempty"`
	RequirementsFileBytes      []byte   `protobuf:"bytes,20,opt,name=requirements_file_bytes,json=requirementsFileBytes,proto3" json:"requirements_file_bytes,omitempty"`
	FileHash                   string   `protobuf:"bytes,21,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	RequiremetsFileHash        string   `protobuf:"bytes,22,opt,name=requiremets_file_hash,json=requiremetsFileHash,proto3" json:"requiremets_file_hash,omitempty"`
	CollectionFileId           string   `protobuf:"bytes,23,opt,name=collection_file_id,json=collectionFileId,proto3" json:"collection_file_id,omitempty"`
	RequiremetsFileId          string   `protobuf:"bytes,24,opt,name=requiremets_file_id,json=requiremetsFileId,proto3" json:"requiremets_file_id,omitempty"`
	EnvFileId                  string   `protobuf:"bytes,25,opt,name=env_file_id,json=envFileId,proto3" json:"env_file_id,omitempty"`
	UserDefinedSynthesizerId   string   `protobuf:"bytes,26,opt,name=user_defined_synthesizer_id,json=userDefinedSynthesizerId,proto3" json:"user_defined_synthesizer_id,omitempty"`
	UserDefinedSynthesizerName string   `protobuf:"bytes,27,opt,name=user_defined_synthesizer_name,json=userDefinedSynthesizerName,proto3" json:"user_defined_synthesizer_name,omitempty"`
	IsCardValidated            bool     `protobuf:"varint,28,opt,name=is_card_validated,json=isCardValidated,proto3" json:"is_card_validated,omitempty"`
	UserDefinedSrcId           string   `protobuf:"bytes,29,opt,name=user_defined_src_id,json=userDefinedSrcId,proto3" json:"user_defined_src_id,omitempty"`
	Level                      string   `protobuf:"bytes,30,opt,name=level,proto3" json:"level,omitempty"`
	Status                     string   `protobuf:"bytes,31,opt,name=status,proto3" json:"status,omitempty"`
	ContentPath                string   `protobuf:"bytes,32,opt,name=content_path,json=contentPath,proto3" json:"content_path,omitempty"`
	PackageName                string   `protobuf:"bytes,33,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
}

func (x *Synthesizer) Reset() {
	*x = Synthesizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Synthesizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Synthesizer) ProtoMessage() {}

func (x *Synthesizer) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Synthesizer.ProtoReflect.Descriptor instead.
func (*Synthesizer) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{7}
}

func (x *Synthesizer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Synthesizer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Synthesizer) GetColumnsAllowedForFilter() []string {
	if x != nil {
		return x.ColumnsAllowedForFilter
	}
	return nil
}

func (x *Synthesizer) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *Synthesizer) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *Synthesizer) GetSecurityCtx() []byte {
	if x != nil {
		return x.SecurityCtx
	}
	return nil
}

func (x *Synthesizer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Synthesizer) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Synthesizer) GetSynthesizerType() string {
	if x != nil {
		return x.SynthesizerType
	}
	return ""
}

func (x *Synthesizer) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *Synthesizer) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Synthesizer) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Synthesizer) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Synthesizer) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *Synthesizer) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Synthesizer) GetFileBytes() []byte {
	if x != nil {
		return x.FileBytes
	}
	return nil
}

func (x *Synthesizer) GetOutputFiles() string {
	if x != nil {
		return x.OutputFiles
	}
	return ""
}

func (x *Synthesizer) GetIsFileToBeReturn() bool {
	if x != nil {
		return x.IsFileToBeReturn
	}
	return false
}

func (x *Synthesizer) GetRequirementsFileBytes() []byte {
	if x != nil {
		return x.RequirementsFileBytes
	}
	return nil
}

func (x *Synthesizer) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *Synthesizer) GetRequiremetsFileHash() string {
	if x != nil {
		return x.RequiremetsFileHash
	}
	return ""
}

func (x *Synthesizer) GetCollectionFileId() string {
	if x != nil {
		return x.CollectionFileId
	}
	return ""
}

func (x *Synthesizer) GetRequiremetsFileId() string {
	if x != nil {
		return x.RequiremetsFileId
	}
	return ""
}

func (x *Synthesizer) GetEnvFileId() string {
	if x != nil {
		return x.EnvFileId
	}
	return ""
}

func (x *Synthesizer) GetUserDefinedSynthesizerId() string {
	if x != nil {
		return x.UserDefinedSynthesizerId
	}
	return ""
}

func (x *Synthesizer) GetUserDefinedSynthesizerName() string {
	if x != nil {
		return x.UserDefinedSynthesizerName
	}
	return ""
}

func (x *Synthesizer) GetIsCardValidated() bool {
	if x != nil {
		return x.IsCardValidated
	}
	return false
}

func (x *Synthesizer) GetUserDefinedSrcId() string {
	if x != nil {
		return x.UserDefinedSrcId
	}
	return ""
}

func (x *Synthesizer) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Synthesizer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Synthesizer) GetContentPath() string {
	if x != nil {
		return x.ContentPath
	}
	return ""
}

func (x *Synthesizer) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

type SynthesizerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsChainingGroup bool               `protobuf:"varint,4,opt,name=isChainingGroup,proto3" json:"isChainingGroup,omitempty"`
	SynthesizerIDs  []string           `protobuf:"bytes,5,rep,name=synthesizerIDs,proto3" json:"synthesizerIDs,omitempty"`
	SynthesizeOrder []*SynthesizeOrder `protobuf:"bytes,6,rep,name=synthesizeOrder,proto3" json:"synthesizeOrder,omitempty"`
	UserId          string             `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthToken       string             `protobuf:"bytes,8,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	Queries         *Query             `protobuf:"bytes,9,opt,name=queries,proto3" json:"queries,omitempty"`
	QueryStr        string             `protobuf:"bytes,10,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
}

func (x *SynthesizerGroup) Reset() {
	*x = SynthesizerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizerGroup) ProtoMessage() {}

func (x *SynthesizerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizerGroup.ProtoReflect.Descriptor instead.
func (*SynthesizerGroup) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{8}
}

func (x *SynthesizerGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SynthesizerGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SynthesizerGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SynthesizerGroup) GetIsChainingGroup() bool {
	if x != nil {
		return x.IsChainingGroup
	}
	return false
}

func (x *SynthesizerGroup) GetSynthesizerIDs() []string {
	if x != nil {
		return x.SynthesizerIDs
	}
	return nil
}

func (x *SynthesizerGroup) GetSynthesizeOrder() []*SynthesizeOrder {
	if x != nil {
		return x.SynthesizeOrder
	}
	return nil
}

func (x *SynthesizerGroup) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SynthesizerGroup) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *SynthesizerGroup) GetQueries() *Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *SynthesizerGroup) GetQueryStr() string {
	if x != nil {
		return x.QueryStr
	}
	return ""
}

type SynthesizerGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SynthesizerGroup *SynthesizerGroup `protobuf:"bytes,1,opt,name=synthesizer_group,json=synthesizerGroup,proto3" json:"synthesizer_group,omitempty"`
	Order            int32             `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	ErrorMsg         string            `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *SynthesizerGroupResp) Reset() {
	*x = SynthesizerGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizerGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizerGroupResp) ProtoMessage() {}

func (x *SynthesizerGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizerGroupResp.ProtoReflect.Descriptor instead.
func (*SynthesizerGroupResp) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{9}
}

func (x *SynthesizerGroupResp) GetSynthesizerGroup() *SynthesizerGroup {
	if x != nil {
		return x.SynthesizerGroup
	}
	return nil
}

func (x *SynthesizerGroupResp) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SynthesizerGroupResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type SynthesizeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SynthesizerID string       `protobuf:"bytes,1,opt,name=synthesizerID,proto3" json:"synthesizerID,omitempty"`
	Synthesizer   *Synthesizer `protobuf:"bytes,2,opt,name=synthesizer,proto3" json:"synthesizer,omitempty"`
	Order         int32        `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SynthesizeOrder) Reset() {
	*x = SynthesizeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizeOrder) ProtoMessage() {}

func (x *SynthesizeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizeOrder.ProtoReflect.Descriptor instead.
func (*SynthesizeOrder) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{10}
}

func (x *SynthesizeOrder) GetSynthesizerID() string {
	if x != nil {
		return x.SynthesizerID
	}
	return ""
}

func (x *SynthesizeOrder) GetSynthesizer() *Synthesizer {
	if x != nil {
		return x.Synthesizer
	}
	return nil
}

func (x *SynthesizeOrder) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SynthesizerGroupCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []byte `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *SynthesizerGroupCollection) Reset() {
	*x = SynthesizerGroupCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizerGroupCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizerGroupCollection) ProtoMessage() {}

func (x *SynthesizerGroupCollection) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizerGroupCollection.ProtoReflect.Descriptor instead.
func (*SynthesizerGroupCollection) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{11}
}

func (x *SynthesizerGroupCollection) GetItems() []byte {
	if x != nil {
		return x.Items
	}
	return nil
}

type SynthesizerCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []byte `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	StatusCode int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorMsg   string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *SynthesizerCollection) Reset() {
	*x = SynthesizerCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizerCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizerCollection) ProtoMessage() {}

func (x *SynthesizerCollection) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizerCollection.ProtoReflect.Descriptor instead.
func (*SynthesizerCollection) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{12}
}

func (x *SynthesizerCollection) GetItems() []byte {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SynthesizerCollection) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *SynthesizerCollection) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type DataInsertionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorMsg   string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Id         string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DataInsertionResponse) Reset() {
	*x = DataInsertionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataInsertionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataInsertionResponse) ProtoMessage() {}

func (x *DataInsertionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cowprotos_cowsynthesizerservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataInsertionResponse.ProtoReflect.Descriptor instead.
func (*DataInsertionResponse) Descriptor() ([]byte, []int) {
	return file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP(), []int{13}
}

func (x *DataInsertionResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DataInsertionResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *DataInsertionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_cowprotos_cowsynthesizerservice_proto protoreflect.FileDescriptor

var file_cowprotos_cowsynthesizerservice_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x6f, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x77, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x09, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1d,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2b, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x74, 0x78, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x72, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xec, 0x07, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x56, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x63, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x74, 0x78,
	0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x43, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x72, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a,
	0x0e, 0x63, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xcc, 0x03, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x48, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x9c,
	0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x7c, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x09, 0x0a, 0x0b,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x17, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x74, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x42, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x43, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x72, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xdd, 0x02, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x3a, 0x0a,
	0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72,
	0x22, 0x89, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x7d, 0x0a, 0x0f,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x1a, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x6b, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x65, 0x0a, 0x15,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x32, 0xf6, 0x04, 0x0a, 0x18, 0x43, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0d,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x72, 0x12, 0x0c, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x1a,
	0x16, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x0c,
	0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x11, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x16, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x11, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x16, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x11, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x1b, 0x2e,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x10,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72,
	0x12, 0x0c, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x1a, 0x16,
	0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x12,
	0x0c, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x1a, 0x0e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x30, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x0d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x72, 0x56, 0x32, 0x1a, 0x11, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x42, 0x45, 0x5a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x77, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x63, 0x6f,
	0x77, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cowprotos_cowsynthesizerservice_proto_rawDescOnce sync.Once
	file_cowprotos_cowsynthesizerservice_proto_rawDescData = file_cowprotos_cowsynthesizerservice_proto_rawDesc
)

func file_cowprotos_cowsynthesizerservice_proto_rawDescGZIP() []byte {
	file_cowprotos_cowsynthesizerservice_proto_rawDescOnce.Do(func() {
		file_cowprotos_cowsynthesizerservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_cowprotos_cowsynthesizerservice_proto_rawDescData)
	})
	return file_cowprotos_cowsynthesizerservice_proto_rawDescData
}

var file_cowprotos_cowsynthesizerservice_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cowprotos_cowsynthesizerservice_proto_goTypes = []interface{}{
	(*RequestQuery)(nil),               // 0: RequestQuery
	(*SynthesizerV2)(nil),              // 1: SynthesizerV2
	(*ExecutionSummary)(nil),           // 2: ExecutionSummary
	(*FilterParams)(nil),               // 3: FilterParams
	(*Query)(nil),                      // 4: Query
	(*QueryRules)(nil),                 // 5: QueryRules
	(*QueryResponse)(nil),              // 6: QueryResponse
	(*Synthesizer)(nil),                // 7: Synthesizer
	(*SynthesizerGroup)(nil),           // 8: SynthesizerGroup
	(*SynthesizerGroupResp)(nil),       // 9: SynthesizerGroupResp
	(*SynthesizeOrder)(nil),            // 10: SynthesizeOrder
	(*SynthesizerGroupCollection)(nil), // 11: SynthesizerGroupCollection
	(*SynthesizerCollection)(nil),      // 12: SynthesizerCollection
	(*DataInsertionResponse)(nil),      // 13: DataInsertionResponse
}
var file_cowprotos_cowsynthesizerservice_proto_depIdxs = []int32{
	3,  // 0: RequestQuery.filter_params:type_name -> FilterParams
	4,  // 1: RequestQuery.queries:type_name -> Query
	4,  // 2: FilterParams.query:type_name -> Query
	5,  // 3: Query.query:type_name -> QueryRules
	4,  // 4: QueryRules.query:type_name -> Query
	10, // 5: SynthesizerGroup.synthesizeOrder:type_name -> SynthesizeOrder
	4,  // 6: SynthesizerGroup.queries:type_name -> Query
	8,  // 7: SynthesizerGroupResp.synthesizer_group:type_name -> SynthesizerGroup
	7,  // 8: SynthesizeOrder.synthesizer:type_name -> Synthesizer
	0,  // 9: CowDataSynthesizeHandler.FilterData:input_type -> RequestQuery
	7,  // 10: CowDataSynthesizeHandler.AddSynthesizer:input_type -> Synthesizer
	7,  // 11: CowDataSynthesizeHandler.UpdateSynthesizer:input_type -> Synthesizer
	8,  // 12: CowDataSynthesizeHandler.AddSynthesizerGroup:input_type -> SynthesizerGroup
	8,  // 13: CowDataSynthesizeHandler.UpdateSynthesizerGroup:input_type -> SynthesizerGroup
	8,  // 14: CowDataSynthesizeHandler.FetchSynthesizerGroup:input_type -> SynthesizerGroup
	7,  // 15: CowDataSynthesizeHandler.FetchSynthesizer:input_type -> Synthesizer
	7,  // 16: CowDataSynthesizeHandler.ValidateSynthesizer:input_type -> Synthesizer
	0,  // 17: CowDataSynthesizeHandler.FetchTemplate:input_type -> RequestQuery
	1,  // 18: CowDataSynthesizeHandler.ExecuteSynthesizer:input_type -> SynthesizerV2
	6,  // 19: CowDataSynthesizeHandler.FilterData:output_type -> QueryResponse
	13, // 20: CowDataSynthesizeHandler.AddSynthesizer:output_type -> DataInsertionResponse
	13, // 21: CowDataSynthesizeHandler.UpdateSynthesizer:output_type -> DataInsertionResponse
	13, // 22: CowDataSynthesizeHandler.AddSynthesizerGroup:output_type -> DataInsertionResponse
	13, // 23: CowDataSynthesizeHandler.UpdateSynthesizerGroup:output_type -> DataInsertionResponse
	11, // 24: CowDataSynthesizeHandler.FetchSynthesizerGroup:output_type -> SynthesizerGroupCollection
	12, // 25: CowDataSynthesizeHandler.FetchSynthesizer:output_type -> SynthesizerCollection
	6,  // 26: CowDataSynthesizeHandler.ValidateSynthesizer:output_type -> QueryResponse
	6,  // 27: CowDataSynthesizeHandler.FetchTemplate:output_type -> QueryResponse
	2,  // 28: CowDataSynthesizeHandler.ExecuteSynthesizer:output_type -> ExecutionSummary
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cowprotos_cowsynthesizerservice_proto_init() }
func file_cowprotos_cowsynthesizerservice_proto_init() {
	if File_cowprotos_cowsynthesizerservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizerV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Synthesizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizerGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizerGroupCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizerCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cowprotos_cowsynthesizerservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataInsertionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cowprotos_cowsynthesizerservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cowprotos_cowsynthesizerservice_proto_goTypes,
		DependencyIndexes: file_cowprotos_cowsynthesizerservice_proto_depIdxs,
		MessageInfos:      file_cowprotos_cowsynthesizerservice_proto_msgTypes,
	}.Build()
	File_cowprotos_cowsynthesizerservice_proto = out.File
	file_cowprotos_cowsynthesizerservice_proto_rawDesc = nil
	file_cowprotos_cowsynthesizerservice_proto_goTypes = nil
	file_cowprotos_cowsynthesizerservice_proto_depIdxs = nil
}
