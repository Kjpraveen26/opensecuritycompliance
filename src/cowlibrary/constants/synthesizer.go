package constants

const SynthesizerAutoGeneratedCode = `# This file is autogenerated. Please do not modify
import importlib
import os
import inspect
from compliancecowcards.structs import cards, cowsynthesizerservice_pb2
from compliancecowcards.utils import cowdictutils
import json
from google.protobuf import json_format


def patch_results_in_output(output_datas, data_to_be_patch, is_extra_info_to_be_clear=False):
    if output_datas and data_to_be_patch and isinstance(output_datas, list) and isinstance(data_to_be_patch, dict):
        for output_data in output_datas:
            if cowdictutils.is_valid_key(output_data, "file_name") and cowdictutils.is_valid_key(data_to_be_patch, output_data["file_name"]):
                output_data.update(data_to_be_patch[output_data["file_name"]])
            if is_extra_info_to_be_clear:
                if isinstance(output_data, dict):
                    output_data.pop("file_name", None)
                    output_data.pop("data_as_df", None)

    return output_datas


is_task_executed = False
for py_module in list(filter(lambda x: x.endswith(".py") and x != inspect.getfile(inspect.currentframe()), os.listdir())):
    filename, file_extension = os.path.splitext(
        os.path.basename(py_module))

    if is_task_executed:
        break

    module_type = importlib.import_module(filename)
    for name, obj in inspect.getmembers(module_type):
        if inspect.isclass(obj):
            if obj != cards.AbstractSynthesizer and issubclass(obj, cards.AbstractSynthesizer):
                data = None

                with open("synthesizer_input.json") as f:
                    data = json.loads(f.read())
                cl = obj()
                synthesizer_obj = cards.cowsynthesizerservice_pb2.SynthesizerV2()
                synthesizer_obj = json_format.ParseDict(
                    data, synthesizer_obj)
                cl.synthesizer_inputs = synthesizer_obj
                output = cl.execute()
                if output and isinstance(output, list):
                    for output_data in output:
                        if isinstance(output_data, dict):
                            output_data.pop("file_name", None)
                            output_data.pop("data_as_df", None)
                if output and bool(output):
                    if hasattr(synthesizer_obj, "get_compliance_info"):
                        compliance_op = synthesizer_obj.get_compliance_info(
                            output)
                        output = patch_results_in_output(
                            output, compliance_op)
                    with open("synthesizer_output.json", "w") as f:
                        if isinstance(output, list):
                            for idx, file_output in enumerate(output):
                                if isinstance(file_output, cowsynthesizerservice_pb2.FileOutput):
                                    output[idx] = json_format.MessageToDict(
                                        file_output)
                        f.write(json.dumps(output))
                is_task_executed = True
                break

`

const SynthesizerAutoGeneratedDefaultCode = `

from compliancecowcards.structs import cards
from compliancecow.models import cowlib
import pandas as pd


class {{SynthesizerName}}(cards.AbstractSynthesizer):
    def execute(self) -> dict:
        #   Client to connect with rule engine and also compliancecow system
        client = cowlib.Client(auth_token=self.auth_token)

        #   Get the files from  rule engine/policycow system
        # output_dict, error = client.get_files_from_rule_engine(
        #     rule_set_id=self.synthesizer_inputs.cn_rule_set_execution_id, files_to_be_fetch=["file_name_to_fetch"])

        # Sample file data. !!!
        #   !!! file data should be dataframe
        file_df = pd.DataFrame(
            [{"id": "id", "name": "name"}, {"id": "id1", "name": "name1"}])
        self.upload_file(file_name="file_name",
                         file_df=file_df, compliance_pct=100)

        # return the file datas
        return self.file_outputs

    def get_compliance_info(self, output_files: list = None) -> dict:
        # define your compliance pct,status calculation and return back. you can get access the file data by accessing self.output_files
        return super().get_compliance_info(output_files)
`
